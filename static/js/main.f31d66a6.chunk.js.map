{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","state/todolists-reducer.ts","state/tasks-reducer.ts","AppWithRed.tsx","serviceWorker.ts","store.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","label","helperText","value","onChange","e","currentTarget","onKeyPress","charCode","IconButton","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Todolist","changeTodolistTitle","id","removeTodolist","Delete","addTask","style","listStyle","paddingLeft","tasks","map","t","key","className","isDone","Checkbox","size","color","newIsDoneValue","checked","changeTaskStatus","newValue","changeTaskTitle","removeTask","Button","filter","changeFilter","initialState","AppWithRedux","todolists","useSelector","state","dispatch","useDispatch","todolistId","action","type","taskID","todolistID","addTaskAC","changeStatus","changeTaskStatusAC","newTitle","changeTaskTitleAC","changeTodolistTitleAC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","padding","v1","addTodoListAC","spacing","tl","allTodolistTasks","tasksForTodolist","item","Paper","elevation","Boolean","window","location","hostname","match","rootReducer","combineReducers","copyState","task","find","newTodolist","todolist","store","createStore","ReactDOM","render","AppWithRed","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.f31d66a6.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\nimport {AddItemFormPropsType} from './types';\r\n\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        {/*<input value={title}*/}\r\n        {/*       onChange={onChangeHandler}*/}\r\n        {/*       onKeyPress={onKeyPressHandler}*/}\r\n        {/*       className={error ? \"error\" : \"\"}*/}\r\n        {/*/>*/}\r\n        <TextField\r\n            variant={\"outlined\"}\r\n            error={!!error}\r\n            label={\"Title\"}\r\n            helperText={error}\r\n            value={title}\r\n            onChange={onChangeHandler}\r\n            onKeyPress={onKeyPressHandler}\r\n        />\r\n        {/*<Button variant={\"contained\"} color=\"primary\" onClick={addItem}>ADD*/}\r\n        {/*</Button>*/}\r\n        <IconButton onClick={addItem}>\r\n            <AddBox/>\r\n        </IconButton>\r\n        {/*<button onClick={addItem}>+</button>*/}\r\n        {/*{error && <div className=\"error-message\">{error}</div>}*/}\r\n    </div>\r\n}\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\nimport {EditableSpanPropsType} from './types';\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField\r\n            variant={\"outlined\"}\r\n            value={title}\r\n            onChange={changeTitle}\r\n            autoFocus\r\n            onBlur={activateViewMode}\r\n        />\r\n        // <input value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n}\r\n","import React, {ChangeEvent} from 'react';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {EditableSpan} from './EditableSpan';\r\nimport {IconButton, Button, Checkbox} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {TodolistPropsType} from './types';\r\n\r\nexport function Todolist(props: TodolistPropsType) {\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id);\r\n    }\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id);\r\n    }\r\n    const changeTodolistTitle = (title: string) => {\r\n        props.changeTodolistTitle(props.id, title);\r\n    }\r\n\r\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.id);\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.id);\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.id);\r\n\r\n    return <div>\r\n        <h3> <EditableSpan value={props.title} onChange={changeTodolistTitle} />\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n            {/*<button onClick={removeTodolist}>x</button>*/}\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <ul style={{listStyle: \"none\", paddingLeft: \"0\"}}>\r\n            {\r\n                props.tasks.map(t => {\r\n                    const onClickHandler = () => props.removeTask(t.id, props.id)\r\n                    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        let newIsDoneValue = e.currentTarget.checked;\r\n                        props.changeTaskStatus(t.id, newIsDoneValue, props.id);\r\n                    }\r\n                    const onTitleChangeHandler = (newValue: string) => {\r\n                        props.changeTaskTitle(t.id, newValue, props.id);\r\n                    }\r\n\r\n\r\n                    return <li key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                        <Checkbox size={'small'}\r\n                                  color={'primary'}\r\n                                  onChange={onChangeHandler}\r\n                                  checked={t.isDone}\r\n                        />\r\n                        {/*<input type=\"checkbox\" onChange={onChangeHandler} checked={t.isDone}/>*/}\r\n                        <EditableSpan value={t.title} onChange={onTitleChangeHandler} />\r\n                        <IconButton onClick={onClickHandler}>\r\n                            <Delete/>\r\n                        </IconButton>\r\n                        {/*<button onClick={onClickHandler}>x</button>*/}\r\n                    </li>\r\n                })\r\n            }\r\n        </ul>\r\n        <div>\r\n            <Button size={\"small\"}\r\n                    variant={props.filter === 'all' ? \"contained\" : \"outlined\"}\r\n                    color={\"primary\"}\r\n                    // className={props.filter === 'all' ? \"active-filter\" : \"\"}\r\n                    onClick={onAllClickHandler}>All\r\n            </Button>\r\n            <Button size={\"small\"}\r\n                    variant={props.filter === 'active' ? \"contained\" : \"outlined\"}\r\n                    color={\"primary\"}\r\n                    // className={props.filter === 'active' ? \"active-filter\" : \"\"}\r\n                    onClick={onActiveClickHandler}>ACTIVE\r\n            </Button>\r\n            <Button size={\"small\"}\r\n                    variant={props.filter === 'completed' ? \"contained\" : \"outlined\"}\r\n                    color={\"primary\"}\r\n                    // className={props.filter === 'completed' ? \"active-filter\" : \"\"}\r\n                    onClick={onCompletedClickHandler}>COMPLETED\r\n            </Button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\n","import {\r\n    AddTodolistActionType, ChangeTodolistFilterActionType, ChangeTodolistTitleActionType,\r\n    FilterValuesType,\r\n    RemoveTodolistActionType,\r\n    TodolistsActionType,\r\n    TodolistType\r\n} from '../types';\r\nimport {v1} from 'uuid';\r\n\r\nconst initialState: Array<TodolistType> = []\r\n\r\nexport const todoListsReducer = (state: Array<TodolistType> = initialState, action: TodolistsActionType) => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            let newTodolist: TodolistType = {\r\n                id: action.todolistID,\r\n                title: action.title,\r\n                filter: 'all'\r\n            }\r\n            return [...state, newTodolist]\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.title = action.title;\r\n                return [...state]\r\n            }\r\n            return state\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.filter = action.filter;\r\n                return [...state]\r\n            }\r\n            return state\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTodoListAC = (todoListID: string): RemoveTodolistActionType => (\r\n    {type: 'REMOVE-TODOLIST', id: todoListID}\r\n)\r\n\r\nexport const addTodoListAC = (title: string): AddTodolistActionType => (\r\n    {type: 'ADD-TODOLIST', title: title, todolistID: v1()}\r\n)\r\n\r\nexport const changeTodolistTitleAC = (title: string, id: string): ChangeTodolistTitleActionType => (\r\n    {type: 'CHANGE-TODOLIST-TITLE', id: id, title: title}\r\n)\r\n\r\nexport const changeTodolistFilterAC = (filter: FilterValuesType, id: string): ChangeTodolistFilterActionType => (\r\n    {type: 'CHANGE-TODOLIST-FILTER', filter: filter, id: id}\r\n)","import {\r\n    AddTaskActionType,\r\n    ChangeTaskStatusActionType, ChangeTaskTitleActionType,\r\n    RemoveTaskActionType, TasksActionType,\r\n    TasksStateType,\r\n    TaskType\r\n} from '../types';\r\nimport {v1} from 'uuid';\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: TasksActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            let copyState = {...state}\r\n            copyState[action.todolistID] = copyState[action.todolistID].filter(task => task.id !== action.taskID)\r\n            return copyState\r\n        }\r\n        case 'ADD-TASK': {\r\n            let copyState = {...state}\r\n            let task: TaskType = {\r\n                id: v1(),\r\n                title: action.title,\r\n                isDone: false\r\n            }\r\n            copyState[action.todolistID] = [task, ...copyState[action.todolistID]]\r\n            return copyState\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            let copyState = {...state}\r\n            let task = copyState[action.todolistID].find(task => task.id === action.taskID)\r\n            if (task) {\r\n                task.isDone = action.isDone\r\n            }\r\n            return copyState\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            let copyState = {...state}\r\n            let task = copyState[action.todolistID].find(task => task.id === action.taskID)\r\n            if (task) {\r\n                task.title = action.newTitle\r\n            }\r\n            return copyState\r\n        }\r\n        case \"ADD-TODOLIST\":\r\n            return {\r\n                ...state,\r\n                [action.todolistID]: []\r\n            }\r\n        case \"REMOVE-TODOLIST\": {\r\n            let copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskID: string, todolistID: string): RemoveTaskActionType => (\r\n    {type: 'REMOVE-TASK', taskID, todolistID}\r\n)\r\n\r\nexport const addTaskAC = (title: string, todolistID: string): AddTaskActionType => (\r\n    {type: 'ADD-TASK', title, todolistID}\r\n)\r\n\r\nexport const changeTaskStatusAC = (taskID: string, isDone: boolean, todolistID: string): ChangeTaskStatusActionType => (\r\n    {type: 'CHANGE-TASK-STATUS', taskID, isDone, todolistID}\r\n)\r\n\r\nexport const changeTaskTitleAC = (taskID: string, newTitle: string, todolistID: string): ChangeTaskTitleActionType => (\r\n    {type: 'CHANGE-TASK-TITLE', taskID, newTitle, todolistID}\r\n)\r\n\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n    addTodoListAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC,\r\n    removeTodoListAC\r\n} from './state/todolists-reducer';\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from './state/tasks-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './store';\r\nimport {FilterValuesType, TasksStateType, TodolistType} from './types';\r\n\r\nfunction AppWithRedux() {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    function removeTask(id: string, todolistId: string) {\r\n        const action = removeTaskAC(id, todolistId)\r\n        dispatch(action)\r\n    }\r\n    function addTask(title: string, todolistId: string) {\r\n        const action = addTaskAC(title, todolistId)\r\n        dispatch(action)\r\n    }\r\n    function changeFilter(value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(value, todolistId)\r\n        dispatch(action)\r\n    }\r\n    function changeStatus(id: string, isDone: boolean, todolistId: string) {\r\n        const action = changeTaskStatusAC(id, isDone, todolistId)\r\n        dispatch(action)\r\n    }\r\n\r\n    function changeTaskTitle(id: string, newTitle: string, todolistId: string) {\r\n        const action = changeTaskTitleAC(id, newTitle, todolistId)\r\n        dispatch(action)\r\n    }\r\n    function removeTodolist(id: string) {\r\n        const action = removeTodoListAC(id)\r\n        dispatch(action)\r\n    }\r\n    function changeTodolistTitle(id: string, title: string) {\r\n        const action = changeTodolistTitleAC(id, title)\r\n        dispatch(action)\r\n    }\r\n    function addTodolist(title: string) {\r\n        const action = addTodoListAC(title)\r\n        dispatch(action)\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed={true}>\r\n                <Grid container={true}\r\n                      style={{padding: '20px 0'}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container={true} spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n                            let tasksForTodolist = allTodolistTasks;\r\n\r\n                            if (tl.filter === 'active') {\r\n                                tasksForTodolist = allTodolistTasks.filter(t => t.isDone === false);\r\n                            }\r\n                            if (tl.filter === 'completed') {\r\n                                tasksForTodolist = allTodolistTasks.filter(t => t.isDone === true);\r\n                            }\r\n                            return (\r\n                                <Grid item key={tl.id}>\r\n                                    <Paper elevation={3}\r\n                                           style={{padding: '20px'}}>\r\n                                        <Todolist\r\n                                            key={tl.id}\r\n                                            id={tl.id}\r\n                                            title={tl.title}\r\n                                            tasks={tasksForTodolist}\r\n                                            removeTask={removeTask}\r\n                                            changeFilter={changeFilter}\r\n                                            addTask={addTask}\r\n                                            changeTaskStatus={changeStatus}\r\n                                            filter={tl.filter}\r\n                                            removeTodolist={removeTodolist}\r\n                                            changeTaskTitle={changeTaskTitle}\r\n                                            changeTodolistTitle={changeTodolistTitle}\r\n                                        />\r\n                                    </Paper>\r\n                                </Grid>\r\n                            )\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {tasksReducer} from './state/tasks-reducer';\r\nimport {todoListsReducer} from './state/todolists-reducer';\r\nimport {combineReducers, createStore} from 'redux';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todoListsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport AppWithRedux from './AppWithRed';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './store';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}