{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","Task.tsx","Todolist.tsx","state/todolists-reducer.ts","state/tasks-reducer.ts","AppWithRed.tsx","serviceWorker.ts","store.ts","index.tsx"],"names":["AddItemForm","React","memo","addItem","useState","title","setTitle","error","setError","addItemInto","trim","TextField","variant","label","helperText","value","onChange","e","currentTarget","onKeyPress","charCode","IconButton","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","removeTask","task","todolistID","changeTaskStatus","changeTaskTitle","className","isDone","Checkbox","size","color","newIsDoneValue","checked","id","newValue","Delete","Todolist","tasks","filter","changeFilter","addTask","removeTodolist","changeTodolistTitle","tasksForTodolist","t","addTaskInto","useCallback","removeTodolistInto","changeTodolistTitleInto","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","style","listStyle","paddingLeft","map","key","Button","initialState","AppWithRedux","todolists","useSelector","state","dispatch","useDispatch","todolistId","action","type","taskID","addTaskAC","changeStatus","changeTaskStatusAC","newTitle","changeTaskTitleAC","changeTodolistTitleAC","addTodolist","v1","addTodoListAC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","padding","spacing","tl","item","Paper","elevation","Boolean","window","location","hostname","match","rootReducer","combineReducers","copyState","newTodolist","todolist","find","store","createStore","ReactDOM","render","AppWithRed","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.86bd8d37.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\nimport {AddItemFormPropsType} from './types';\r\n\r\n\r\nexport const AddItemForm: React.FC<AddItemFormPropsType> = React.memo(({addItem}) => {\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemInto = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemInto();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant={'outlined'}\r\n                   error={!!error}\r\n                   label={'Title'}\r\n                   helperText={error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n        />\r\n        <IconButton onClick={addItemInto}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\nimport {EditableSpanPropsType} from './types';\r\n\r\nexport const EditableSpan: React.FC<EditableSpanPropsType> = React.memo(({\r\n                                                                             onChange,\r\n                                                                             value\r\n                                                                         }) => {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField variant={'outlined'}\r\n                     value={title}\r\n                     onChange={changeTitle}\r\n                     autoFocus\r\n                     onBlur={activateViewMode}\r\n        />\r\n        // <input value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{value}</span>\r\n})\r\n","import React, {ChangeEvent} from 'react';\r\nimport {Checkbox, IconButton} from '@material-ui/core';\r\nimport {EditableSpan} from './EditableSpan';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {TaskPropsType} from './types';\r\n\r\nexport const Task: React.FC<TaskPropsType> = React.memo(({\r\n                                                             removeTask,\r\n                                                             task,\r\n                                                             todolistID,\r\n                                                             changeTaskStatus,\r\n                                                             changeTaskTitle\r\n                                                         }) => {\r\n\r\n    const onClickHandler = () => removeTask(task.id, todolistID)\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked;\r\n        changeTaskStatus(task.id, newIsDoneValue, todolistID);\r\n    }\r\n    const onTitleChangeHandler = (newValue: string) => {\r\n        changeTaskTitle(task.id, newValue, todolistID)\r\n    }\r\n\r\n    return <div className={task.isDone ? 'is-done' : ''}>\r\n        <Checkbox size={'small'}\r\n                  color={'primary'}\r\n                  onChange={onChangeHandler}\r\n                  checked={task.isDone}\r\n        />\r\n        <EditableSpan value={task.title}\r\n                      onChange={onTitleChangeHandler}\r\n        />\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})","import React, {useCallback} from 'react';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {EditableSpan} from './EditableSpan';\r\nimport {IconButton, Button} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {TodolistPropsType} from './types';\r\nimport {Task} from './Task';\r\n\r\nexport const Todolist: React.FC<TodolistPropsType> = React.memo(({\r\n                                                                     id,\r\n                                                                     tasks,\r\n                                                                     filter,\r\n                                                                     title,\r\n                                                                     changeFilter,\r\n                                                                     addTask,\r\n                                                                     removeTodolist,\r\n                                                                     changeTodolistTitle,\r\n                                                                     changeTaskTitle,\r\n                                                                     removeTask,\r\n                                                                     changeTaskStatus\r\n                                                                 }) => {\r\n\r\n    let tasksForTodolist = tasks\r\n\r\n    if (filter === 'active') {\r\n        tasksForTodolist = tasks.filter(t => t.isDone === false)\r\n    }\r\n    if (filter === 'completed') {\r\n        tasksForTodolist = tasks.filter(t => t.isDone === true)\r\n    }\r\n\r\n    const addTaskInto = useCallback((title: string) => {\r\n        addTask(title, id)\r\n    }, [addTask, id])\r\n\r\n    const removeTodolistInto = useCallback(() => {\r\n        removeTodolist(id)\r\n    }, [removeTodolist, id])\r\n    const changeTodolistTitleInto = useCallback((title: string) => {\r\n        changeTodolistTitle(id, title)\r\n    }, [changeTodolistTitle, id])\r\n\r\n    const onAllClickHandler = useCallback(() => changeFilter('all', id), [changeFilter, id]);\r\n    const onActiveClickHandler = useCallback(() => changeFilter('active', id), [changeFilter, id]);\r\n    const onCompletedClickHandler = useCallback(() => changeFilter('completed', id), [changeFilter, id]);\r\n\r\n    return <div>\r\n        <h3>\r\n            <EditableSpan value={title}\r\n                          onChange={changeTodolistTitleInto}\r\n            />\r\n            <IconButton onClick={removeTodolistInto}>\r\n                <Delete/>\r\n            </IconButton>\r\n            {/*<button onClick={removeTodolist}>x</button>*/}\r\n        </h3>\r\n        <AddItemForm addItem={addTaskInto}/>\r\n        <ul style={{listStyle: 'none', paddingLeft: '0'}}>\r\n            {\r\n                tasksForTodolist.map(t => {\r\n                    return <Task key={t.id}\r\n                                 task={t}\r\n                                 todolistID={id}\r\n                                 removeTask={removeTask}\r\n                                 changeTaskStatus={changeTaskStatus}\r\n                                 changeTaskTitle={changeTaskTitle}\r\n                    />\r\n                })\r\n            }\r\n        </ul>\r\n        <div>\r\n            <Button size={'small'}\r\n                    variant={filter === 'all' ? 'contained' : 'outlined'}\r\n                    color={'primary'}\r\n                // className={props.filter === 'all' ? \"active-filter\" : \"\"}\r\n                    onClick={onAllClickHandler}>All\r\n            </Button>\r\n            <Button size={'small'}\r\n                    variant={filter === 'active' ? 'contained' : 'outlined'}\r\n                    color={'primary'}\r\n                // className={props.filter === 'active' ? \"active-filter\" : \"\"}\r\n                    onClick={onActiveClickHandler}>ACTIVE\r\n            </Button>\r\n            <Button size={'small'}\r\n                    variant={filter === 'completed' ? 'contained' : 'outlined'}\r\n                    color={'primary'}\r\n                // className={props.filter === 'completed' ? \"active-filter\" : \"\"}\r\n                    onClick={onCompletedClickHandler}>COMPLETED\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import {\r\n    AddTodolistActionType, ChangeTodolistFilterActionType, ChangeTodolistTitleActionType,\r\n    FilterValuesType,\r\n    RemoveTodolistActionType,\r\n    TodolistsActionType,\r\n    TodolistType\r\n} from '../types';\r\nimport {v1} from 'uuid';\r\n\r\nconst initialState: Array<TodolistType> = []\r\n\r\nexport const todoListsReducer = (state: Array<TodolistType> = initialState, action: TodolistsActionType) => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            let newTodolist: TodolistType = {\r\n                id: action.todolistID,\r\n                title: action.title,\r\n                filter: 'all'\r\n            }\r\n            return [...state, newTodolist]\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.title = action.title;\r\n                return [...state]\r\n            }\r\n            return state\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.filter = action.filter;\r\n                return [...state]\r\n            }\r\n            return state\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTodoListAC = (todoListID: string): RemoveTodolistActionType => (\r\n    {type: 'REMOVE-TODOLIST', id: todoListID}\r\n)\r\n\r\nexport const addTodoListAC = (title: string): AddTodolistActionType => (\r\n    {type: 'ADD-TODOLIST', title: title, todolistID: v1()}\r\n)\r\n\r\nexport const changeTodolistTitleAC = (title: string, id: string): ChangeTodolistTitleActionType => (\r\n    {type: 'CHANGE-TODOLIST-TITLE', id: id, title: title}\r\n)\r\n\r\nexport const changeTodolistFilterAC = (filter: FilterValuesType, id: string): ChangeTodolistFilterActionType => (\r\n    {type: 'CHANGE-TODOLIST-FILTER', filter: filter, id: id}\r\n)","import {\r\n    AddTaskActionType,\r\n    ChangeTaskStatusActionType, ChangeTaskTitleActionType,\r\n    RemoveTaskActionType, TasksActionType,\r\n    TasksStateType,\r\n    TaskType\r\n} from '../types';\r\nimport {v1} from 'uuid';\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: TasksActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            let copyState = {...state}\r\n            copyState[action.todolistID] = copyState[action.todolistID].filter(task => task.id !== action.taskID)\r\n            return copyState\r\n        }\r\n        case 'ADD-TASK': {\r\n            let copyState = {...state}\r\n            let task: TaskType = {\r\n                id: v1(),\r\n                title: action.title,\r\n                isDone: false\r\n            }\r\n            copyState[action.todolistID] = [task, ...copyState[action.todolistID]]\r\n            return copyState\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            return {...state,\r\n            [action.todolistID]: state[action.todolistID]\r\n                .map(t => {\r\n                    if (t.id !== action.taskID) {\r\n                        return {...t}\r\n                    } else {\r\n                        return {...t, isDone: action.isDone}\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            return {...state,\r\n                [action.todolistID]: state[action.todolistID]\r\n                    .map(t => {\r\n                        if (t.id === action.taskID) {\r\n                            return {...t}\r\n                        } else {\r\n                            return {...t, title: action.newTitle}\r\n                        }\r\n                    })\r\n            }\r\n        }\r\n        case \"ADD-TODOLIST\":\r\n            return {\r\n                ...state,\r\n                [action.todolistID]: []\r\n            }\r\n        case \"REMOVE-TODOLIST\": {\r\n            let copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskID: string, todolistID: string): RemoveTaskActionType => (\r\n    {type: 'REMOVE-TASK', taskID, todolistID}\r\n)\r\n\r\nexport const addTaskAC = (title: string, todolistID: string): AddTaskActionType => (\r\n    {type: 'ADD-TASK', title, todolistID}\r\n)\r\n\r\nexport const changeTaskStatusAC = (taskID: string, isDone: boolean, todolistID: string): ChangeTaskStatusActionType => (\r\n    {type: 'CHANGE-TASK-STATUS', taskID, isDone, todolistID}\r\n)\r\n\r\nexport const changeTaskTitleAC = (taskID: string, newTitle: string, todolistID: string): ChangeTaskTitleActionType => (\r\n    {type: 'CHANGE-TASK-TITLE', taskID, newTitle, todolistID}\r\n)\r\n\r\n\r\n","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n    addTodoListAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC,\r\n    removeTodoListAC\r\n} from './state/todolists-reducer';\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from './state/tasks-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './store';\r\nimport {FilterValuesType, TasksStateType, TodolistType} from './types';\r\n\r\nfunction AppWithRedux() {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n        const action = removeTaskAC(id, todolistId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        const action = addTaskAC(title, todolistId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n        const action = changeTodolistFilterAC(value, todolistId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const changeStatus = useCallback((id: string, isDone: boolean, todolistId: string) => {\r\n        const action = changeTaskStatusAC(id, isDone, todolistId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((id: string, newTitle: string, todolistId: string) => {\r\n        const action = changeTaskTitleAC(id, newTitle, todolistId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const removeTodolist = useCallback((id: string) => {\r\n        const action = removeTodoListAC(id)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const changeTodolistTitle = useCallback((id: string, title: string) => {\r\n        const action = changeTodolistTitleAC(id, title)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const addTodolist = useCallback((title: string) => {\r\n        const action = addTodoListAC(title)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\"\r\n                                color=\"inherit\"\r\n                                aria-label=\"menu\"\r\n                    >\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed={true}>\r\n                <Grid container={true}\r\n                      style={{padding: '20px 0'}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container={true}\r\n                      spacing={3}\r\n                >\r\n                    {\r\n                        todolists.map(tl => {\r\n                            return (\r\n                                <Grid item key={tl.id}>\r\n                                    <Paper elevation={3}\r\n                                           style={{padding: '20px'}}>\r\n                                        <Todolist\r\n                                            key={tl.id}\r\n                                            id={tl.id}\r\n                                            title={tl.title}\r\n                                            tasks={tasks[tl.id]}\r\n                                            removeTask={removeTask}\r\n                                            changeFilter={changeFilter}\r\n                                            addTask={addTask}\r\n                                            changeTaskStatus={changeStatus}\r\n                                            filter={tl.filter}\r\n                                            removeTodolist={removeTodolist}\r\n                                            changeTaskTitle={changeTaskTitle}\r\n                                            changeTodolistTitle={changeTodolistTitle}\r\n                                        />\r\n                                    </Paper>\r\n                                </Grid>\r\n                            )\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {tasksReducer} from './state/tasks-reducer';\r\nimport {todoListsReducer} from './state/todolists-reducer';\r\nimport {combineReducers, createStore} from 'redux';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todoListsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport AppWithRedux from './AppWithRed';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './store';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}